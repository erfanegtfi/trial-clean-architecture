plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation (Libraries.kotlin)
    implementation (Libraries.ktx)
    implementation (Androidx.lifecycleExtensions)
    implementation (Androidx.navigationFragmentKtx)
    implementation (Jetbrains.coroutinesAndroid)
    implementation (Jetbrains.coroutinesCore)
    implementation (Androidx.livedata)
//    implementation (Androidx.viewmodel)

    //dagger
//    implementation (Libraries.dagger)
//    kapt (Libraries.daggerCompiler)
    implementation (Libraries.inject)

    //room
    implementation (Androidx.room)
    kapt (Androidx.roomCompiler)
    implementation (Androidx.roomRuntime)

//    //retrofit
//    implementation (Libraries.retrofit)
//    implementation (Libraries.gsonConverter)
//    implementation (Libraries.gson)
//    implementation (Libraries.scalarsConverter)

    implementation project(':domain')
    implementation project(':common')
}

// Trigger BuildConfig creation

//project.afterEvaluate {
//    tasks.all { task ->
//        if (task.name =~ /generate.*BuildConfig/) {
//            task.dependsOn(propagateBuildConfig)
//        }
//    }
//}
//
//task propagateBuildConfig {
//    project.android.buildTypes.all { type ->
//        type.debuggable = !isVariantRelease()
////        type.buildConfigField "boolean", "RELEASE", isVariantRelease().toString()
//    }
//}
//
//def isVariantRelease() {
//    return rootProject.ext.variantRelease
//}